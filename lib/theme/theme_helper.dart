import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    PrefUtils().setThemeData(_newTheme);
    Get.forceAppUpdate();
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onErrorContainer.withOpacity(1),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: appTheme.gray10002,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(9.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 4,
        space: 4,
        color: colorScheme.primary,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.gray50003,
          fontSize: 16.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.black900,
          fontSize: 14.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: colorScheme.primary,
          fontSize: 11.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w400,
        ),
        headlineSmall: TextStyle(
          color: appTheme.black900,
          fontSize: 24.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
        labelLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 12.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        labelMedium: TextStyle(
          color: appTheme.black900.withOpacity(0.31),
          fontSize: 10.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
        labelSmall: TextStyle(
          color: appTheme.blueGray30002,
          fontSize: 8.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w700,
        ),
        titleLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 22.fSize,
          fontFamily: 'Outfit',
          fontWeight: FontWeight.w400,
        ),
        titleMedium: TextStyle(
          color: appTheme.black900,
          fontSize: 18.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
        titleSmall: TextStyle(
          color: colorScheme.onErrorContainer.withOpacity(1),
          fontSize: 15.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w700,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF169444),
    primaryContainer: Color(0XFF1E1E1E),

    // Error colors
    errorContainer: Color(0XFF364153),
    onError: Color(0XFF007AFF),
    onErrorContainer: Color(0X8EFFFFFF),

    // On colors(text colors)
    onPrimary: Color(0XFF0600B3),
    onPrimaryContainer: Color(0XFFB5B5B5),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => Color(0XFF000000);

  // BlueGray
  Color get blueGray300 => Color(0XFF8A96BC);
  Color get blueGray30001 => Color(0XFF7AACBA);
  Color get blueGray30002 => Color(0XFF809FB8);
  Color get blueGray400 => Color(0XFF169444);
  Color get blueGray40001 => Color(0XFF75A488);
  Color get blueGray500 => Color(0XFF6C768B);
  Color get blueGray5011 => Color(0X11E7EAEE);
  Color get blueGray700 => Color(0XFF355168);
  Color get blueGray900 => Color(0XFF222B45);
  Color get blueGray90023 => Color(0X231E383F);

  // DeepOrange
  Color get deepOrange100 => Color(0XFFFFC4C4);

  // DeepOrangef
  Color get deepOrange1003f => Color(0X3FE3D1B2);

  // Gray
  Color get gray100 => Color(0XFFF1F4F7);
  Color get gray10001 => Color(0XFFF5F5F5);
  Color get gray10002 => Color(0XFFF2F3F6);
  Color get gray200 => Color(0XFFE8E8E8);
  Color get gray300 => Color(0XFFD9DCE8);
  Color get gray30001 => Color(0XFFDEE5E8);
  Color get gray50 => Color(0XFFF9F9F9);
  Color get gray500 => Color(0XFF9A9A9A);
  Color get gray50001 => Color(0XFFABABAB);
  Color get gray50002 => Color(0XFF9397A0);
  Color get gray50003 => Color(0XFF9E9E9E);
  Color get gray600 => Color(0XFF747474);
  Color get gray700 => Color(0XFF555555);
  Color get gray900 => Color(0XFF181D27);
  Color get gray90001 => Color(0XFF19202D);
  Color get gray900A5 => Color(0XA5151C28);

  // Green
  Color get green50 => Color(0XFFE3F3E9);
  Color get green70068 => Color(0X68159444);
  Color get greenA700 => Color(0XFF13B369);
  Color get greenA70001 => Color(0XFF07A854);

  // Indigo
  Color get indigo300 => Color(0XFF5F9ECE);

  // LightBlue
  Color get lightBlue900 => Color(0XFF0E5CAA);

  // Orange
  Color get orange50 => Color(0XFFFFF5DD);

  // Red
  Color get red300 => Color(0XFFE38D6B);
  Color get red400 => Color(0XFFEC5865);
  Color get redA700 => Color(0XFFDF0404);

  // Teal
  Color get teal900 => Color(0XFF003659);

  // White
  Color get whiteA700 => Color(0XFFFEFFFE);

  // Yellow
  Color get yellow800 => Color(0XFFF1B722);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
